// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        Role?    // Nullable - solo superadmins tienen rol
  image       String?  // URL de imagen de perfil
  isOnboarded Boolean  @default(false) // Si completó onboarding
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relación con tokens OTP
  otpTokens OtpToken[]
  
  // Relación con workspaces
  workspaces WorkspaceUser[]
  
  // Relación con invitaciones enviadas
  invitations WorkspaceInvitation[]
  
  // Relación con formularios y plantillas
  formTemplates FormTemplate[] // Plantillas creadas
  forms         Form[]          // Formularios creados
  
  @@map("users")
}

model OtpToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relación con usuario
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_tokens")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relación con usuarios
  users WorkspaceUser[]
  
  // Relación con invitaciones
  invitations WorkspaceInvitation[]
  
  // Relación con formularios
  forms Form[] // Formularios del workspace
  
  @@map("workspaces")
}

model WorkspaceUser {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(member)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relaciones
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
  @@map("workspace_users")
}

enum Role {
  superadmin // Super admin del sistema
}

enum WorkspaceRole {
  admin  // Admin del workspace
  member // Miembro del workspace
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  email       String
  workspaceId String
  role        WorkspaceRole @default(member)
  token       String        @unique
  expiresAt   DateTime
  invitedById String
  acceptedAt  DateTime?
  createdAt   DateTime      @default(now())
  
  // Relaciones
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation(fields: [invitedById], references: [id])
  
  @@index([email])
  @@index([token])
  @@map("workspace_invitations")
}

// Nuevos modelos para el Form Builder

model FormTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  fields      Json     // Estructura de campos serializada
  isGlobal    Boolean  @default(true) // Todas las plantillas son globales
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  createdBy User @relation(fields: [createdById], references: [id])
  forms     Form[] // Formularios creados desde esta plantilla
  
  @@map("form_templates")
}

model Form {
  id           String        @id @default(cuid())
  name         String
  description  String?
  fields       Json          // Estructura de campos personalizada
  workspaceId  String
  templateId   String?       // Plantilla de origen (opcional)
  shareToken   String        @unique // Token para enlace público
  isActive     Boolean       @default(true)
  allowEdits   Boolean       @default(false) // Permitir ediciones múltiples
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relaciones
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  template    FormTemplate? @relation(fields: [templateId], references: [id])
  createdBy   User          @relation(fields: [createdById], references: [id])
  responses   FormResponse[]
  
  @@index([shareToken])
  @@index([workspaceId])
  @@map("forms")
}

model FormResponse {
  id          String            @id @default(cuid())
  formId      String
  data        Json              // Respuestas serializadas
  status      ResponseStatus    @default(new)
  submittedAt DateTime          @default(now())
  submitterIP String?           // IP del usuario (opcional)
  
  // Relaciones
  form  Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  files FormResponseFile[]
  
  @@index([formId])
  @@index([status])
  @@map("form_responses")
}

model FormResponseFile {
  id         String @id @default(cuid())
  responseId String
  fieldName  String // Nombre del campo que subió el archivo
  fileName   String // Nombre original del archivo
  fileUrl    String // URL en Vercel Blob
  fileSize   Int    // Tamaño en bytes
  fileType   String // MIME type
  uploadedAt DateTime @default(now())
  
  // Relaciones
  response FormResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  
  @@index([responseId])
  @@map("form_response_files")
}

enum ResponseStatus {
  new
  reviewed
  processed
}